name: dotnet build only tag
on:
  push:
    tags:
      - "**" # only tag
env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_NOLOGO: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  NUGET_XMLDOC_MODE: skip
  # colour output
  DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: 1
  TERM: xterm
jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - run: echo not run on branch push
      - run: echo "::set-output name=GIT_TAG::${GITHUB_REF##*/}"
        id: CI_TAG
      - run: echo ${{ steps.CI_TAG.outputs.GIT_TAG }}
      - run: echo "GIT_TAG=${GITHUB_REF##*/}" >> "$GITHUB_ENV"
      - run: echo ${{ env.GIT_TAG }}
  dotnet-console:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.0.x
      - run: dotnet build ./src/dotnet/console/ -c Debug
      - run: dotnet test ./src/dotnet/console-tests/ -c Debug
      - run: dotnet publish ./src/dotnet/console/ -c Debug -o ./out/dotnet-console
      - uses: actions/upload-artifact@v2
        with:
          name: dotnet-console
          path: ./out/dotnet-console
  dotnet-console-container:
    strategy:
      matrix:
        dotnet: ["6.0.x"] # support latest only
    runs-on: ubuntu-latest
    timeout-minutes: 5
    container:
      image: mcr.microsoft.com/dotnet/sdk:6.0
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ matrix.dotnet }}
      # build
      - run: dotnet build ./src/dotnet/console/ -c Debug
      # test
      - run: dotnet test ./src/dotnet/console-tests/ -c Debug
      # publish
      - run: dotnet publish ./src/dotnet/console/ -c Debug -o ./out/dotnet-console-container
      # upload
      - uses: actions/upload-artifact@v2
        with:
          name: dotnet-console-container
          path: ./out/dotnet-console-container
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs:
      - dotnet-console
      - dotnet-console-container
    steps:
      - uses: actions/download-artifact@v2
      - run: zip -r dotnet-console.zip ./dotnet-console/
      - run: zip -r dotnet-console-container.zip ./dotnet-console-container
      # Create Release
      - uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Ver.${{ github.ref }}
          draft: "true"
          prerelease: "false"
      - uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dotnet-console-container/console.dll
          asset_name: dotnet-console-container
          asset_content_type: application/octet-stream
      - uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dotnet-console.zip
          asset_name: dotnet-console.zip
          asset_content_type: application/zip
      - uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dotnet-console-container.zip
          asset_name: dotnet-console-container.zip
          asset_content_type: application/zip
